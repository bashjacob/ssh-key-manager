#!/bin/bash
#
#set -x
# key_encryption key_comment key_name
source $(dirname $0)/lib/var

generate-key () {
  #key selection
  key_encryption=""
  echo "Which encryption want you use?
(1) ed25519 - recommended
(2) rsa
(q) Quit
"
  while true; do
    read -n1 -p "Encryption: " option_encryption
    echo
    case "$option_encryption" in
      1) key_encryption="ed25519"
        break
      ;;
      2) key_encryption="rsa"
        break
      ;;
      q|Q) return
      ;;
      *) echo -e '\033[1mPlease provide correct option\033[0m\n'
      ;;
    esac
  done
  #separator comment
  read -p "Provide a short comment for your key: " key_comment
  read -p "Provide a unique name for your key: " key_name

  #generate key
  ssh-keygen -t "$key_encryption" -f "${key_path}$key_name" -C "$key_comment"
  echo -e '\033[1mKey generated successfully!\033[0m\n'
}

list-keys () {
  key_list=$(ls "$key_path" | egrep -iv "authorized_keys|known_hosts|config|.pub")
  keys_arr=($key_list)
  numb_of_elem=${#keys_arr[@]}
  cnt=1

  for ssh_key in "${keys_arr[@]}"
  do
    echo "($cnt) $ssh_key"
    cnt=$(( $cnt+1 ))
  done
  echo "(q) Quit"

  while true; do
    read -n1 -p "Select: " user_pick
    echo
    if [[ $user_pick -gt $numb_of_elem ]]; then
      echo -e "\n\033[1mPlease provide correct number (1-$numb_of_elem)\033[0m"
    else
      selected_key=$(( $user_pick-1 ))
      key_name="${keys_arr[$selected_key]}"; echo
      if [[ $selected_key -lt 0 ]]; then
        key_name=""
      fi
      break
    fi
  done
}

remove-key () {
  echo "Pick key you want to remove"
  list-keys
  if [[ "$user_pick" == "q" ]]; then
    echo "Quitting"
  else
    rm "${key_path}$key_name" && rm "${key_path}$key_name.pub"
    echo -e "\033[1mKey $key_name removed successfully!\033[0m\n"
  fi
}

copy-id () {
  echo "Which key you want to copy?"
  list-keys
  if [[ "$user_pick" == "q" ]]; then
    echo "Quitting"
  else
    while true; do
      read -n1 -p "Leave default port (22)? [y/N]: " defport
      case "$defport" in
        y|Y) sciport=22
          break
        ;;
        n|N) read -p "Provide a port: " sciport
          break
        ;;
        *) echo "Wrong answer"
        ;;
      esac
      
    done
    echo
    read -p "User: " sciuser
    read -p "Address: " scihostname
    read -p "Provide alias for this connection: " scialias
    ssh-copy-id -i "${key_path}$key_name" -p $sciport "${sciuser}@$scihostname" && echo "
Host $scialias
  Hostname='$scihostname'
  Port=$sciport
  User=$sciuser
  IdentityFile ${key_path}$key_name" >> $HOME/.ssh/config && echo -e "\033[1mNow you can try to connect with 'ssh $scialias'\033[0m" || echo "Something went wrong, try again"
  fi
}
